{"meta":{"title":"Yakun's blogs","subtitle":"","description":"","author":"Yakun","url":"https://yakun0622.gitee.io","root":"/"},"pages":[{"title":"标签","date":"2020-11-26T05:43:49.000Z","updated":"2020-11-26T05:44:15.000Z","comments":false,"path":"tags/index.html","permalink":"https://yakun0622.gitee.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Kubernetes(K8s)-k8s服务安装","slug":"k8s-inatall-1","date":"2020-11-26T07:53:53.000Z","updated":"2020-11-26T07:53:54.000Z","comments":true,"path":"2020/11/26/k8s-inatall-1/","link":"","permalink":"https://yakun0622.gitee.io/2020/11/26/k8s-inatall-1/","excerpt":"","text":"一、环境准备1、机器环境 节点CPU核数必须是 ：&gt;= 2核 ，否则k8s无法启动 DNS网络： 最好设置为 本地网络连通的DNS,否则网络不通，无法下载一些镜像 linux内核： linux内核必须是 4 版本以上，因此必须把linux核心进行升级 准备3台虚拟机环境，或者是3台阿里云服务器都可。 k8s-master01: 此机器用来安装k8s-master的操作环境 k8s-node01: 此机器用来安装k8s node节点的环境 k8s-node02: 此机器用来安装k8s node节点的环境 2、依赖环境 给每一台机器设置主机名 hostnamectl set-hostname k8s-master01 hostnamectl set-hostname k8s-node01 hostnamectl set-hostname k8s-node02 查看主机名 hostname #配置IP host映射关系 vi /etc/hosts 192.168.66.10 k8s-master01 192.168.66.11 k8s-node01 192.168.66.12 k8s-node02 安装依赖环境，注意：每一台机器都需要安装此依赖环境 yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git iproute lrzsz bash-completion tree bridge- utils unzip bind-utils gcc 安装iptables，启动iptables，设置开机自启，清空iptables规则，保存当前规则到默认规则 # 关闭防火墙 systemctl stop firewalld &amp;&amp; systemctl disable firewalld # 置空iptables yum -y install iptables-services &amp;&amp; systemctl start iptables &amp;&amp; systemctl enable iptables &amp;&amp; iptables -F &amp;&amp; service iptables save 关闭selinux #闭swap分区【虚拟内存】并且永久关闭虚拟内存 swapoff -a &amp;&amp; sed -i &#x27;/ swap / s/^\\(.*\\)$/#\\1/g&#x27; /etc/fstab #关闭selinux setenforce 0 &amp;&amp; sed -i &#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27; /etc/selinux/config 升级Linux内核为4.44版本 rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm #安装内核 yum --enablerepo=elrepo-kernel install -y kernel-lt #设置开机从新内核启动 grub2-set-default &#x27;CentOS Linux (4.4.189-1.el7.elrepo.x86_64) 7 (Core)&#x27; #注意：设置完内核后，需要重启服务器才会生效。 #查询内核 uname -r 调整内核参数，对于k8s cat &gt; kubernetes.conf &lt;&lt; EOF net.bridge.bridge-nf-call-iptables=1 net.bridge.bridge-nf-call-ip6tables=1 net.ipv4.ip_forward=1 net.ipv4.tcp_tw_recycle=0 vm.swappiness=0 vm.overcommit_memory=1 vm.panic_on_oom=0 fs.inotify.max_user_instances=8192 fs.inotify.max_user_watches=1048576 fs.file-max=52706963 fs.nr_open=52706963 net.ipv6.conf.all.disable_ipv6=1 net.netfilter.nf_conntrack_max=2310720 EOF #将优化内核文件拷贝到/etc/sysctl.d/文件夹下，这样优化文件开机的时候能够被调用 cp kubernetes.conf /etc/sysctl.d/kubernetes.conf #手动刷新，让优化文件立即生效 sysctl -p /etc/sysctl.d/kubernetes.conf 调整系统临时区 — 如果已经设置时区，可略过 #设置系统时区为中国/上海 timedatectl set-timezone Asia/Shanghai #将当前的 UTC 时间写入硬件时钟 timedatectl set-local-rtc 0 #重启依赖于系统时间的服务 systemctl restart rsyslog systemctl restart crond 关闭系统不需要的服务 systemctl stop postfix &amp;&amp; systemctl disable postfix 设置日志保存方式 #1）.创建保存日志的目录 mkdir /var/log/journal #2）.创建配置文件存放目录 mkdir /etc/systemd/journald.conf.d #3）.创建配置文件 cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;EOF [Journal] Storage=persistent Compress=yes SyncIntervalSec=5m RateLimitInterval=30s RateLimitBurst=1000 SystemMaxUse=10G SystemMaxFileSize=200M MaxRetentionSec=2week ForwardToSyslog=no EOF #4）.重启systemd journald的配置 systemctl restart systemd-journald 打开文件数调整 (可忽略，不执行) echo &quot;* soft nofile 65536&quot; &gt;&gt; /etc/security/limits.conf echo &quot;* hard nofile 65536&quot; &gt;&gt; /etc/security/limits.conf kube-proxy 开启 ipvs 前置条件 modprobe br_netfilter cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF #!/bin/bash modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack_ipv4 EOF ##使用lsmod命令查看这些文件是否被引导 chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4 3、docker部署#1、安装docker yum install -y yum-utils device-mapper-persistent-data lvm2 #紧接着配置一个稳定（stable）的仓库、仓库配置会保存到/etc/yum.repos.d/docker-ce.repo文 件中 4、kubeadm[一键安装k8s] 二、集群安装 依赖镜像 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo #更新Yum安装的相关Docke软件包&amp;安装Docker CE yum update -y &amp;&amp; yum install docker-ce 2.设置docker daemon文件 #创建/etc/docker目录 mkdir /etc/docker #更新daemon.json文件 cat &gt; /etc/docker/daemon.json &lt;&lt;EOF &#123;&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],&quot;log-driver&quot;: &quot;json-file&quot;,&quot;log-opts&quot;: &#123;&quot;max-size&quot;: &quot;100m&quot;&#125;&#125; EOF #注意： 一定注意编码问题，出现错误：查看命令：journalctl -amu docker 即可发现错误 #创建，存储docker配置文件 mkdir -p /etc/systemd/system/docker.service.d 3.重启docker服务 systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl enable docker 安装kubernetes的时候，需要安装kubelet, kubeadm等包，但k8s官网给的yum源是 packages.cloud.google.com，国内访问不了，此时我们可以使用阿里云的yum仓库镜像。 cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF 安装kubeadm、kubelet、kubectl yum install -y kubeadm-1.15.1 kubelet-1.15.1 kubectl-1.15.1 # 启动 kubelet systemctl enable kubelet &amp;&amp; systemctl start kubelet 上传镜像压缩包，把压缩包中的镜像导入到本地镜像仓库编写脚本问题，导入镜像包到本地docker镜像仓库： # kubeadm 初始化k8s集群的时候，会从gce Google云中下载（pull）相应的镜像,且镜像相对比较 大，下载比较慢，且需要解决科学上网的一个问题，国内上goole，懂得........... #1、导入镜像脚本代码 （在任意目录下创建sh脚本文件：image-load.sh） #!/bin/bash #注意 镜像解压的目录位置 ls /root/kubeadm-basic.images &gt; /tmp/images-list.txt cd /root/kubeadm-basic.images for i in $(cat /tmp/images-list.txt) do docker load -i $i done rm -rf /tmp/images-list.txt #2、修改权限，可执行权限 chmod 755 image-load.sh #3、开始执行,镜像导入 ./image-load.sh #4、传输文件及镜像到其他node节点 #拷贝到node01节点 scp -r image-load.sh kubeadm-basic.images root@k8s-node01:/root/ #拷贝到node02节点 scp -r image-load.sh kubeadm-basic.images root@k8s-node02:/root/ #其他节点依次执行sh脚本，导入镜像 2、k8s部署#初始化主节点 — 只需要在主节点执行 #1、拉取yaml资源配置文件 kubeadm config print init-defaults &gt; kubeadm-config.yaml #2、修改yaml资源文件 localAPIEndpoint: advertiseAddress: 192.168.66.10 # 注意：修改配置文件的IP地址 kubernetesVersion: v1.15.1 #注意：修改版本号，必须和kubectl版本保持一致 networking: # 指定flannel模型通信 pod网段地址,此网段和flannel网段一致 podSubnet: &quot;10.244.0.0/16&quot; serviceSubnet: &quot;10.96.0.0/12&quot; #指定使用ipvs网络进行通信 --- apiVersion: kubeproxy.config.k8s.io/v1alpha1 kind: kubeProxyConfiguration featureGates: SupportIPVSProxyMode: true mode: ipvs #3、初始化主节点，开始部署 kubeadm init --config=kubeadm-config.yaml --experimental-upload-certs | tee kubeadm-init.log #注意：执行此命令，CPU核心数量必须大于1核，否则无法执行成功 按照k8s指示，执行下面的命令： #4、初始化成功后执行如下命令 #创建目录，保存连接配置缓存，认证文件 mkdir -p $HOME/.kube #拷贝集群管理配置文件 cp -i /etc/kubernetes/admin.conf $HOME/.kube/config #授权给配置文件 chown $(id -u):$(id -g) $HOME/.kube/config 我们发现已经可以成功查询node节点信息了，但是节点的状态却是NotReady,不是Runing的状态。原因是此时我们使用ipvs+flannel的方式进行网络通信，但是flannel网络插件还没有部署，因此节点状态此时为NotReady 3、flannel插件#部署flannel网络插件— 只需要在主节点执行 #1、下载flannel网络插件 wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml #2、部署flannel kubectl create -f kube-flannel.yml #也可进行部署网络 kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml 部署完毕查询pod,发现一些异常错误现象：发现通过flannel部署的pod都出现pending,ImagePullBackOff这样的问题：查询日志信息，发现了一些错误： #查询一个pod的详细信息 kubectl describe pod kube-flannel-ds-amd64-jd67h -n kube-system kubectl apply -f kube-flannel.yml #服务已正常启动 部署flannel网络插件时候，注意网络连通的问题： 4、节点Join构建kubernetes主节点成功，会产生一个日志文件（命令中指定日志输出文件 “tee kubeadm-init.log”），内容如下所示： #加入主节点以及其余工作节点，执行安装日志中的命令即可 #查看日志文件 cat kubeadm-init.log #负责命令到其他几个node节点进行执行即可 kubeadm join 192.168.66.10:6443 --token abcdef.0123456789abcdef \\ --discovery-token-ca-cert-hash sha256:6d8aad1451c1303ee52aada4ea2351e8c8d64863b074628586535d0d369ca2c2 执行完毕，查看效果如下所示：发现还有一些节点处于NotReady状态，是因为这些节点pod容器还处于初始化的状态，需要等一点时间： #更详细查看命令，可以看见初始化节点所属节点： # 查询工作空间中pod容器的详细信息 kubectl get pod -n kube-system -o wide 5、私有仓库 #私有仓库搭建 harbor #伪造证书 &quot;insecure-registries&quot;: [&quot;https://hub.kaikeba.com&quot;] # 把证书添加/etc/docker/daemon.json文件中，其的每一个节点都做如下模式添加：伪造证书 &#123;&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],&quot;log-driver&quot;: &quot;json-file&quot;,&quot;log- opts&quot;: &#123;&quot;max-size&quot;: &quot;100m&quot;&#125;,&quot;insecure-registries&quot;: [&quot;https://hub.kaikeba.com&quot;]&#125; # node01 添加 &quot;insecure-registries&quot;: [&quot;https://hub.kaikeba.com&quot;] # node02 添加 &quot;insecure-registries&quot;: [&quot;https://hub.kaikeba.com&quot;] # 伪造证书 vi /etc/docker/daemon.json","categories":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://yakun0622.gitee.io/categories/Kubernetes/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"https://yakun0622.gitee.io/tags/k8s/"}]},{"title":"Hexo--分离文章标题和文件名","slug":"hexo-1","date":"2020-11-23T10:12:58.000Z","updated":"2020-11-26T07:43:04.000Z","comments":true,"path":"2020/11/23/hexo-1/","link":"","permalink":"https://yakun0622.gitee.io/2020/11/23/hexo-1/","excerpt":"","text":"默认情况下，hexo生成的文章标题，也会作为文件名，同时也会作为url路径的一部分这对于中文的编码问题也是件头痛的事情 Hexo官方文档说明: # -s 后面的第一个参数表示文件名，可以使用英文 # -s 后面的第二个参数表示文章标题名，可以使用中文 # -s, --slug, Post slug. Customize the URL of the post hexo new -s &#x27;article&#x27; &#x27;文章标题&#x27;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://yakun0622.gitee.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://yakun0622.gitee.io/tags/Hexo/"}]},{"title":"centos7 yum安装MySQL5.6","slug":"mysql-1","date":"2020-11-23T09:58:14.000Z","updated":"2020-11-26T05:41:03.000Z","comments":true,"path":"2020/11/23/mysql-1/","link":"","permalink":"https://yakun0622.gitee.io/2020/11/23/mysql-1/","excerpt":"","text":"下载wget包管理工具 yum -y install wget 下载mysql的rpm包 wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm 解压rpm包 rpm -ivh mysql-community-release-el7-5.noarch.rpm 安装mysql服务 yum -y install mysql-server 启动mysql，开机自启 systemctl start mysqld systemctl enable mysqld 登录mysql mysql 修改密码 set password for root@localhost = password(&#x27;root&#x27;); 开放远程连接 grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option; flush privileges;","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://yakun0622.gitee.io/categories/MySQL/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://yakun0622.gitee.io/tags/Linux/"},{"name":"MySQL","slug":"MySQL","permalink":"https://yakun0622.gitee.io/tags/MySQL/"},{"name":"centos","slug":"centos","permalink":"https://yakun0622.gitee.io/tags/centos/"}]},{"title":"calibre-web 豆瓣API失效解决","slug":"calibre-1","date":"2020-11-23T09:49:25.000Z","updated":"2020-11-26T05:40:49.000Z","comments":true,"path":"2020/11/23/calibre-1/","link":"","permalink":"https://yakun0622.gitee.io/2020/11/23/calibre-1/","excerpt":"","text":"网上常见的 apikey 0df993c66c0c636e29ecbb5344252a4a 已经在八月被豆瓣封禁。所以需要将旧的key改为054022eaeae0b00e0fc068c0c0a2102a 修改方式： vim /calibre-web/app/cps/static/js/get_meta.js 找到 // 找到： var apikey = &quot;0df993c66c0c636e29ecbb5344252a4a&quot;; // 改为： var apikey = &quot;054022eaeae0b00e0fc068c0c0a2102a&quot;; 如下图所示：","categories":[{"name":"技术随笔","slug":"技术随笔","permalink":"https://yakun0622.gitee.io/categories/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"calibre","slug":"calibre","permalink":"https://yakun0622.gitee.io/tags/calibre/"},{"name":"NAS","slug":"NAS","permalink":"https://yakun0622.gitee.io/tags/NAS/"}]},{"title":"pm2运行Python","slug":"pm2-1","date":"2020-11-23T09:48:08.000Z","updated":"2020-11-26T05:41:09.000Z","comments":true,"path":"2020/11/23/pm2-1/","link":"","permalink":"https://yakun0622.gitee.io/2020/11/23/pm2-1/","excerpt":"","text":"使用pm2运行Python命令： # --interpreter指定解释器 pm2 start main.py -x --interpreter python3","categories":[],"tags":[{"name":"pm2","slug":"pm2","permalink":"https://yakun0622.gitee.io/tags/pm2/"}]},{"title":"docker permission denied","slug":"docker-1","date":"2020-11-23T09:42:53.000Z","updated":"2020-11-26T05:45:48.000Z","comments":true,"path":"2020/11/23/docker-1/","link":"","permalink":"https://yakun0622.gitee.io/2020/11/23/docker-1/","excerpt":"","text":"用户权限报错 Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/create?fromImage=10.211.55.3%3A5000%2Flearn&amp;tag=registry: dial unix /var/run/docker.sock: connect: permission denied 原因：docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。 解决方法1 使用sudo获取管理员权限，运行docker命令 解决方法2 docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令 sudo groupadd docker #添加docker用户组 sudo gpasswd -a $USER docker #将登陆用户加入到docker用户组中 newgrp docker #更新用户组 sudo systemctl restart docker # 重启docker docker ps #测试docker命令是否可以使用sudo正常使用","categories":[{"name":"docker","slug":"docker","permalink":"https://yakun0622.gitee.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://yakun0622.gitee.io/tags/docker/"}]}],"categories":[{"name":"Kubernetes","slug":"Kubernetes","permalink":"https://yakun0622.gitee.io/categories/Kubernetes/"},{"name":"Hexo","slug":"Hexo","permalink":"https://yakun0622.gitee.io/categories/Hexo/"},{"name":"MySQL","slug":"MySQL","permalink":"https://yakun0622.gitee.io/categories/MySQL/"},{"name":"技术随笔","slug":"技术随笔","permalink":"https://yakun0622.gitee.io/categories/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/"},{"name":"docker","slug":"docker","permalink":"https://yakun0622.gitee.io/categories/docker/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"https://yakun0622.gitee.io/tags/k8s/"},{"name":"Hexo","slug":"Hexo","permalink":"https://yakun0622.gitee.io/tags/Hexo/"},{"name":"Linux","slug":"Linux","permalink":"https://yakun0622.gitee.io/tags/Linux/"},{"name":"MySQL","slug":"MySQL","permalink":"https://yakun0622.gitee.io/tags/MySQL/"},{"name":"centos","slug":"centos","permalink":"https://yakun0622.gitee.io/tags/centos/"},{"name":"calibre","slug":"calibre","permalink":"https://yakun0622.gitee.io/tags/calibre/"},{"name":"NAS","slug":"NAS","permalink":"https://yakun0622.gitee.io/tags/NAS/"},{"name":"pm2","slug":"pm2","permalink":"https://yakun0622.gitee.io/tags/pm2/"},{"name":"docker","slug":"docker","permalink":"https://yakun0622.gitee.io/tags/docker/"}]}