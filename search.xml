<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kubernetes(K8s)-k8s服务安装</title>
      <link href="blog/2020/11/26/k8s-inatall-1/"/>
      <url>blog/2020/11/26/k8s-inatall-1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h3 id="1、机器环境"><a href="#1、机器环境" class="headerlink" title="1、机器环境"></a>1、机器环境</h3><ul><li>节点CPU核数必须是 ：&gt;= 2核 ，否则k8s无法启动</li><li>DNS网络： 最好设置为 本地网络连通的DNS,否则网络不通，无法下载一些镜像</li><li>linux内核： linux内核必须是 4 版本以上，因此必须把linux核心进行升级</li><li>准备3台虚拟机环境，或者是3台阿里云服务器都可。</li><li>k8s-master01: 此机器用来安装k8s-master的操作环境</li><li>k8s-node01: 此机器用来安装k8s node节点的环境</li><li>k8s-node02: 此机器用来安装k8s node节点的环境</li></ul><h3 id="2、依赖环境"><a href="#2、依赖环境" class="headerlink" title="2、依赖环境"></a>2、依赖环境</h3><ol><li>给每一台机器设置主机名 </li></ol><pre><code class="hljs dsconfig"><span class="hljs-string">hostnamectl </span><span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-master01 </span><span class="hljs-string">hostnamectl </span><span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node01 </span><span class="hljs-string">hostnamectl </span><span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node02</span><span class="hljs-string"></span><span class="hljs-string">查</span>看主机名 <span class="hljs-string">hostname </span><span class="hljs-comment">#配置IP host映射关系 </span><span class="hljs-string">vi </span>/<span class="hljs-string">etc/</span><span class="hljs-string">hosts </span><span class="hljs-string">192.</span><span class="hljs-string">168.</span><span class="hljs-string">66.</span><span class="hljs-string">10 </span><span class="hljs-string">k8s-master01 </span><span class="hljs-string">192.</span><span class="hljs-string">168.</span><span class="hljs-string">66.</span><span class="hljs-string">11 </span><span class="hljs-string">k8s-node01 </span><span class="hljs-string">192.</span><span class="hljs-string">168.</span><span class="hljs-string">66.</span><span class="hljs-string">12 </span><span class="hljs-string">k8s-node02</span></code></pre><ol start="2"><li>安装依赖环境，注意：每一台机器都需要安装此依赖环境 </li></ol><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>-y conntrack ntpdate ntp ipvsadm ipset <span class="hljs-keyword">jq </span>iptables curl sysstat libseccomp wget vim net-tools git iproute lrzsz <span class="hljs-keyword">bash-completion </span>tree <span class="hljs-keyword">bridge- </span>utils unzip <span class="hljs-keyword">bind-utils </span>gcc</code></pre><ol start="3"><li>安装iptables，启动iptables，设置开机自启，清空iptables规则，保存当前规则到默认规则</li></ol><pre><code class="hljs sql"><span class="hljs-comment"># 关闭防火墙</span>systemctl <span class="hljs-keyword">stop</span> firewalld &amp;&amp; systemctl <span class="hljs-keyword">disable</span> firewalld <span class="hljs-comment"># 置空iptables </span>yum -y <span class="hljs-keyword">install</span> iptables-services &amp;&amp; systemctl <span class="hljs-keyword">start</span> iptables &amp;&amp; systemctl <span class="hljs-keyword">enable</span> iptables &amp;&amp; iptables -F &amp;&amp; service iptables <span class="hljs-keyword">save</span></code></pre><ol start="4"><li>关闭selinux </li></ol><pre><code class="hljs awk"><span class="hljs-comment">#闭swap分区【虚拟内存】并且永久关闭虚拟内存 </span>swapoff -a &amp;&amp; sed -i <span class="hljs-string">&#x27;/ swap / s/^\(.*\)$/#\1/g&#x27;</span> <span class="hljs-regexp">/etc/</span>fstab <span class="hljs-comment">#关闭selinux </span>setenforce <span class="hljs-number">0</span> &amp;&amp; sed -i <span class="hljs-string">&#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27;</span> <span class="hljs-regexp">/etc/</span>selinux/config</code></pre><ol start="5"><li>升级Linux内核为4.44版本 </li></ol><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -Uvh http://www.elrepo.org/elrepo-release-<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-<span class="hljs-number">4</span>.el<span class="hljs-number">7</span>.elrepo.noarch.rpm <span class="hljs-comment">#安装内核 </span><span class="hljs-attribute">yum</span> --enablerepo=elrepo-kernel install -y kernel-lt <span class="hljs-comment">#设置开机从新内核启动 </span><span class="hljs-attribute">grub2</span>-set-default &#x27;CentOS Linux (<span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">189</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.elrepo.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>) <span class="hljs-number">7</span> (Core)&#x27; #注意：设置完内核后，需要重启服务器才会生效。 <span class="hljs-comment">#查询内核 </span><span class="hljs-attribute">uname</span> -r</code></pre><ol start="6"><li>调整内核参数，对于k8s </li></ol><pre><code class="hljs routeros">cat &gt; kubernetes.conf &lt;&lt; EOFnet.bridge.<span class="hljs-attribute">bridge-nf-call-iptables</span>=1 net.bridge.<span class="hljs-attribute">bridge-nf-call-ip6tables</span>=1 net.ipv4.<span class="hljs-attribute">ip_forward</span>=1 net.ipv4.<span class="hljs-attribute">tcp_tw_recycle</span>=0 vm.<span class="hljs-attribute">swappiness</span>=0 vm.<span class="hljs-attribute">overcommit_memory</span>=1 vm.<span class="hljs-attribute">panic_on_oom</span>=0 fs.inotify.<span class="hljs-attribute">max_user_instances</span>=8192 fs.inotify.<span class="hljs-attribute">max_user_watches</span>=1048576 fs.<span class="hljs-attribute">file-max</span>=52706963 fs.<span class="hljs-attribute">nr_open</span>=52706963 net.ipv6.conf.all.<span class="hljs-attribute">disable_ipv6</span>=1 net.netfilter.<span class="hljs-attribute">nf_conntrack_max</span>=2310720EOF<span class="hljs-comment">#将优化内核文件拷贝到/etc/sysctl.d/文件夹下，这样优化文件开机的时候能够被调用 </span>cp kubernetes.conf /etc/sysctl.d/kubernetes.conf <span class="hljs-comment">#手动刷新，让优化文件立即生效 </span>sysctl -p /etc/sysctl.d/kubernetes.conf</code></pre><ol start="7"><li>调整系统临时区 — 如果已经设置时区，可略过 </li></ol><pre><code class="hljs dsconfig"><span class="hljs-comment">#设置系统时区为中国/上海 </span><span class="hljs-string">timedatectl </span><span class="hljs-built_in">set-timezone</span> <span class="hljs-string">Asia/</span><span class="hljs-string">Shanghai </span><span class="hljs-comment">#将当前的 UTC 时间写入硬件时钟 </span><span class="hljs-string">timedatectl </span><span class="hljs-built_in">set-local-rtc</span> 0 <span class="hljs-comment">#重启依赖于系统时间的服务 </span><span class="hljs-string">systemctl </span><span class="hljs-string">restart </span><span class="hljs-string">rsyslog </span><span class="hljs-string">systemctl </span><span class="hljs-string">restart </span><span class="hljs-string">crond</span></code></pre><ol start="8"><li>关闭系统不需要的服务 </li></ol><pre><code class="hljs gauss">systemctl <span class="hljs-keyword">stop</span> postfix &amp;&amp; systemctl <span class="hljs-keyword">disable</span> postfix</code></pre><ol start="9"><li>设置日志保存方式 </li></ol><pre><code class="hljs routeros"><span class="hljs-comment">#1）.创建保存日志的目录</span>mkdir /var/log/journal <span class="hljs-comment">#2）.创建配置文件存放目录 </span>mkdir /etc/systemd/journald.conf.d <span class="hljs-comment">#3）.创建配置文件 </span>cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;EOF [Journal]<span class="hljs-attribute">Storage</span>=persistent <span class="hljs-attribute">Compress</span>=<span class="hljs-literal">yes</span> <span class="hljs-attribute">SyncIntervalSec</span>=5m <span class="hljs-attribute">RateLimitInterval</span>=30s <span class="hljs-attribute">RateLimitBurst</span>=1000 <span class="hljs-attribute">SystemMaxUse</span>=10G <span class="hljs-attribute">SystemMaxFileSize</span>=200M <span class="hljs-attribute">MaxRetentionSec</span>=2week <span class="hljs-attribute">ForwardToSyslog</span>=<span class="hljs-literal">no</span> EOF <span class="hljs-comment">#4）.重启systemd journald的配置 </span>systemctl restart systemd-journald</code></pre><ol start="10"><li>打开文件数调整 (可忽略，不执行) </li></ol><pre><code class="hljs arcade">echo <span class="hljs-string">&quot;* soft nofile 65536&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>security/limits.conf echo <span class="hljs-string">&quot;* hard nofile 65536&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>security/limits.conf</code></pre><ol start="11"><li>kube-proxy 开启 ipvs 前置条件 </li></ol><pre><code class="hljs gradle">modprobe br_netfilter cat &gt; <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/modules/i</span>pvs.modules &lt;&lt;EOF #!<span class="hljs-regexp">/bin/</span>bash modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack_ipv4 EOF##使用lsmod命令查看这些文件是否被引导 chmod <span class="hljs-number">755</span> <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/modules/i</span>pvs.modules &amp;&amp; bash <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/modules/i</span>pvs.modules &amp;&amp; lsmod | <span class="hljs-keyword">grep</span> -e ip_vs -e nf_conntrack_ipv4</code></pre><h3 id="3、docker部署"><a href="#3、docker部署" class="headerlink" title="3、docker部署"></a>3、docker部署</h3><p>#1、安装docker </p><pre><code class="hljs css"><span class="hljs-selector-tag">yum</span> <span class="hljs-selector-tag">install</span> <span class="hljs-selector-tag">-y</span> <span class="hljs-selector-tag">yum-utils</span> <span class="hljs-selector-tag">device-mapper-persistent-data</span> <span class="hljs-selector-tag">lvm2</span> #紧接着配置一个稳定（<span class="hljs-selector-tag">stable</span>）的仓库、仓库配置会保存到/<span class="hljs-selector-tag">etc</span>/<span class="hljs-selector-tag">yum</span><span class="hljs-selector-class">.repos</span><span class="hljs-selector-class">.d</span>/<span class="hljs-selector-tag">docker-ce</span><span class="hljs-selector-class">.repo</span>文 件中</code></pre><p>4、kubeadm[一键安装k8s]</p><h1 id="二、集群安装"><a href="#二、集群安装" class="headerlink" title="二、集群安装"></a>二、集群安装</h1><ol><li>依赖镜像</li></ol><pre><code class="hljs vim">yum-config-manager --<span class="hljs-built_in">add</span>-repo http<span class="hljs-variable">s:</span>//download.docker.<span class="hljs-keyword">com</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo #更新Yum安装的相关Docke软件包&amp;安装Docker CE yum <span class="hljs-keyword">update</span> -<span class="hljs-keyword">y</span> &amp;&amp; yum install docker-<span class="hljs-keyword">ce</span></code></pre><p>2.设置docker daemon文件</p><pre><code class="hljs awk"><span class="hljs-comment">#创建/etc/docker目录 </span>mkdir <span class="hljs-regexp">/etc/</span>docker <span class="hljs-comment">#更新daemon.json文件 </span>cat &gt; <span class="hljs-regexp">/etc/</span>docker/daemon.json &lt;&lt;EOF &#123;<span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span>&#125;&#125; EOF<span class="hljs-comment">#注意： 一定注意编码问题，出现错误：查看命令：journalctl -amu docker 即可发现错误 </span><span class="hljs-comment">#创建，存储docker配置文件 </span>mkdir -p <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>docker.service.d</code></pre><p>3.重启docker服务 </p><pre><code class="hljs pgsql">systemctl daemon-reload &amp;&amp; systemctl <span class="hljs-keyword">restart</span> docker &amp;&amp; systemctl <span class="hljs-keyword">enable</span> docker</code></pre><ol><li>安装kubernetes的时候，需要安装kubelet, kubeadm等包，但k8s官网给的yum源是 packages.cloud.google.com，国内访问不了，此时我们可以使用阿里云的yum仓库镜像。 </li></ol><pre><code class="hljs awk">cat &lt;&lt;EOF &gt; <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/repos/</span>kubernetes-el7-x86_64 enabled=<span class="hljs-number">1</span> gpgcheck=<span class="hljs-number">0</span> repo_gpgcheck=<span class="hljs-number">0</span> gpgkey=http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/yum</span>-key.gpg http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/</span>rpm-package-key.gpg EOF</code></pre><ol start="2"><li>安装kubeadm、kubelet、kubectl</li></ol><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install -y kubeadm-<span class="hljs-number">1</span>.<span class="hljs-number">15</span>.<span class="hljs-number">1</span> kubelet-<span class="hljs-number">1</span>.<span class="hljs-number">15</span>.<span class="hljs-number">1</span> kubectl-<span class="hljs-number">1</span>.<span class="hljs-number">15</span>.<span class="hljs-number">1</span> <span class="hljs-comment"># 启动 kubelet </span><span class="hljs-attribute">systemctl</span> enable kubelet &amp;&amp; systemctl start kubelet</code></pre><p>上传镜像压缩包，把压缩包中的镜像导入到本地镜像仓库<br>编写脚本问题，导入镜像包到本地docker镜像仓库：</p><pre><code class="hljs awk"><span class="hljs-comment"># kubeadm 初始化k8s集群的时候，会从gce Google云中下载（pull）相应的镜像,且镜像相对比较</span>大，下载比较慢，且需要解决科学上网的一个问题，国内上goole，懂得...........<span class="hljs-comment">#1、导入镜像脚本代码 （在任意目录下创建sh脚本文件：image-load.sh）</span><span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#注意 镜像解压的目录位置</span>ls <span class="hljs-regexp">/root/</span>kubeadm-basic.images &gt; <span class="hljs-regexp">/tmp/im</span>ages-list.txtcd <span class="hljs-regexp">/root/</span>kubeadm-basic.images<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(cat <span class="hljs-regexp">/tmp/im</span>ages-list.txt)<span class="hljs-keyword">do</span>docker load -i <span class="hljs-variable">$i</span>donerm -rf <span class="hljs-regexp">/tmp/im</span>ages-list.txt<span class="hljs-comment">#2、修改权限，可执行权限</span>chmod <span class="hljs-number">755</span> image-load.sh<span class="hljs-comment">#3、开始执行,镜像导入</span>./image-load.sh<span class="hljs-comment">#4、传输文件及镜像到其他node节点</span><span class="hljs-comment">#拷贝到node01节点</span>scp -r image-load.sh kubeadm-basic.images root@k8s-node01:<span class="hljs-regexp">/root/</span><span class="hljs-comment">#拷贝到node02节点</span>scp -r image-load.sh kubeadm-basic.images root@k8s-node02:<span class="hljs-regexp">/root/</span><span class="hljs-comment">#其他节点依次执行sh脚本，导入镜像</span></code></pre><p>2、k8s部署<br>#初始化主节点 — 只需要在主节点执行 </p><pre><code class="hljs yaml"><span class="hljs-comment">#1、拉取yaml资源配置文件 </span><span class="hljs-string">kubeadm</span> <span class="hljs-string">config</span> <span class="hljs-string">print</span> <span class="hljs-string">init-defaults</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">kubeadm-config.yaml</span><span class="hljs-comment">#2、修改yaml资源文件 </span><span class="hljs-attr">localAPIEndpoint:</span>     <span class="hljs-attr">advertiseAddress:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.66</span><span class="hljs-number">.10</span>  <span class="hljs-comment"># 注意：修改配置文件的IP地址 </span>    <span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-string">v1.15.1</span> <span class="hljs-comment">#注意：修改版本号，必须和kubectl版本保持一致 </span>    <span class="hljs-attr">networking:</span> <span class="hljs-comment"># 指定flannel模型通信 pod网段地址,此网段和flannel网段一致 </span>        <span class="hljs-attr">podSubnet:</span> <span class="hljs-string">&quot;10.244.0.0/16&quot;</span>         <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-string">&quot;10.96.0.0/12&quot;</span> <span class="hljs-comment">#指定使用ipvs网络进行通信 </span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span>     <span class="hljs-attr">kind:</span> <span class="hljs-string">kubeProxyConfiguration</span>     <span class="hljs-attr">featureGates:</span>         <span class="hljs-attr">SupportIPVSProxyMode:</span> <span class="hljs-literal">true</span>         <span class="hljs-attr">mode:</span> <span class="hljs-string">ipvs</span><span class="hljs-comment">#3、初始化主节点，开始部署 </span><span class="hljs-string">kubeadm</span> <span class="hljs-string">init</span> <span class="hljs-string">--config=kubeadm-config.yaml</span> <span class="hljs-string">--experimental-upload-certs</span> <span class="hljs-string">|</span> <span class="hljs-string">tee</span> <span class="hljs-string">kubeadm-init.log</span><span class="hljs-comment">#注意：执行此命令，CPU核心数量必须大于1核，否则无法执行成功</span><span class="hljs-string">按照k8s指示，执行下面的命令：</span><span class="hljs-comment">#4、初始化成功后执行如下命令 </span><span class="hljs-comment">#创建目录，保存连接配置缓存，认证文件 </span><span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">$HOME/.kube</span> <span class="hljs-comment">#拷贝集群管理配置文件 </span><span class="hljs-string">cp</span> <span class="hljs-string">-i</span> <span class="hljs-string">/etc/kubernetes/admin.conf</span> <span class="hljs-string">$HOME/.kube/config</span> <span class="hljs-comment">#授权给配置文件 </span><span class="hljs-string">chown</span> <span class="hljs-string">$(id</span> <span class="hljs-string">-u):$(id</span> <span class="hljs-string">-g)</span> <span class="hljs-string">$HOME/.kube/config</span></code></pre><p>我们发现已经可以成功查询node节点信息了，但是节点的状态却是NotReady,不是Runing的状态。原因是此时我们使用ipvs+flannel的方式进行网络通信，但是flannel网络插件还没有部署，因此节点状态此时为NotReady</p><p>3、flannel插件<br>#部署flannel网络插件<br>— 只需要在主节点执行 </p><pre><code class="hljs awk"><span class="hljs-comment">#1、下载flannel网络插件 </span>wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml <span class="hljs-comment">#2、部署flannel </span>kubectl create -f kube-flannel.yml <span class="hljs-comment">#也可进行部署网络 </span>kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml</code></pre><p>部署完毕查询pod,发现一些异常错误现象：<br>发现通过flannel部署的pod都出现pending,ImagePullBackOff这样的问题：<br>查询日志信息，发现了一些错误：</p><pre><code class="hljs sql"><span class="hljs-comment">#查询一个pod的详细信息 </span>kubectl <span class="hljs-keyword">describe</span> pod kube-flannel-ds-amd64-jd67h -n kube-<span class="hljs-keyword">system</span> kubectl <span class="hljs-keyword">apply</span> -f kube-flannel.yml</code></pre><p>#服务已正常启动</p><p>部署flannel网络插件时候，注意网络连通的问题：</p><p>4、节点Join<br>构建kubernetes主节点成功，会产生一个日志文件（命令中指定日志输出文件 “tee kubeadm-init.log”），内容如下所示：</p><pre><code class="hljs applescript"><span class="hljs-comment">#加入主节点以及其余工作节点，执行安装日志中的命令即可 </span><span class="hljs-comment">#查看日志文件 </span>cat kubeadm-init.<span class="hljs-built_in">log</span> <span class="hljs-comment">#负责命令到其他几个node节点进行执行即可</span>kubeadm join <span class="hljs-number">192.168</span><span class="hljs-number">.66</span><span class="hljs-number">.10</span>:<span class="hljs-number">6443</span> <span class="hljs-comment">--token abcdef.0123456789abcdef \</span><span class="hljs-comment">--discovery-token-ca-cert-hash sha256:6d8aad1451c1303ee52aada4ea2351e8c8d64863b074628586535d0d369ca2c2</span></code></pre><p>执行完毕，查看效果如下所示：<br>发现还有一些节点处于NotReady状态，是因为这些节点pod容器还处于初始化的状态，需要等一点时间：</p><pre><code class="hljs vala"><span class="hljs-meta">#更详细查看命令，可以看见初始化节点所属节点：</span><span class="hljs-meta"># 查询工作空间中pod容器的详细信息</span>kubectl <span class="hljs-keyword">get</span> pod -n kube-system -o wide</code></pre><p>5、私有仓库</p><p>#私有仓库搭建 harbor </p><pre><code class="hljs vala"><span class="hljs-meta">#伪造证书 </span><span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;https://hub.kaikeba.com&quot;</span>] <span class="hljs-meta"># 把证书添加/etc/docker/daemon.json文件中，其的每一个节点都做如下模式添加：伪造证书 </span>&#123;<span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<span class="hljs-string">&quot;log- opts&quot;</span>: &#123;<span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span>&#125;,<span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;https://hub.kaikeba.com&quot;</span>]&#125; <span class="hljs-meta"># node01 添加 </span><span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;https://hub.kaikeba.com&quot;</span>] <span class="hljs-meta"># node02 添加 </span><span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;https://hub.kaikeba.com&quot;</span>] <span class="hljs-meta"># 伪造证书 </span>vi /etc/docker/daemon.json</code></pre>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo--分离文章标题和文件名</title>
      <link href="blog/2020/11/23/hexo-1/"/>
      <url>blog/2020/11/23/hexo-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>默认情况下，hexo生成的文章标题，也会作为文件名，同时也会作为url路径的一部分<br>这对于中文的编码问题也是件头痛的事情</p></blockquote><p>Hexo官方文档说明:</p><pre><code class="hljs vala"><span class="hljs-meta"># -s 后面的第一个参数表示文件名，可以使用英文</span><span class="hljs-meta"># -s 后面的第二个参数表示文章标题名，可以使用中文</span><span class="hljs-meta"># -s, --slug, Post slug. Customize the URL of the post</span>hexo <span class="hljs-keyword">new</span> -s <span class="hljs-string">&#x27;article&#x27;</span> <span class="hljs-string">&#x27;文章标题&#x27;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 yum安装MySQL5.6</title>
      <link href="blog/2020/11/23/mysql-1/"/>
      <url>blog/2020/11/23/mysql-1/</url>
      
        <content type="html"><![CDATA[<ol><li>下载wget包管理工具</li></ol><pre><code class="hljs powershell">yum <span class="hljs-literal">-y</span> install <span class="hljs-built_in">wget</span></code></pre><ol start="2"><li>下载mysql的rpm包</li></ol><pre><code class="hljs powershell"><span class="hljs-built_in">wget</span> http://repo.mysql.com/mysql<span class="hljs-literal">-community</span><span class="hljs-literal">-release</span><span class="hljs-literal">-el7</span><span class="hljs-literal">-5</span>.noarch.rpm</code></pre><ol start="3"><li>解压rpm包</li></ol><pre><code class="hljs powershell">rpm <span class="hljs-literal">-ivh</span> mysql<span class="hljs-literal">-community</span><span class="hljs-literal">-release</span><span class="hljs-literal">-el7</span><span class="hljs-literal">-5</span>.noarch.rpm</code></pre><ol start="4"><li>安装mysql服务</li></ol><pre><code class="hljs powershell">yum <span class="hljs-literal">-y</span> install mysql<span class="hljs-literal">-server</span></code></pre><ol start="5"><li>启动mysql，开机自启</li></ol><pre><code class="hljs powershell">systemctl <span class="hljs-built_in">start</span> mysqldsystemctl enable mysqld</code></pre><ol start="6"><li>登录mysql</li></ol><pre><code class="hljs powershell">mysql</code></pre><ol start="7"><li>修改密码</li></ol><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> password <span class="hljs-keyword">for</span> root@localhost = password(<span class="hljs-string">&#x27;root&#x27;</span>);</code></pre><ol start="8"><li>开放远程连接</li></ol><pre><code class="hljs powershell">grant all privileges on *.* to <span class="hljs-string">&#x27;root&#x27;</span><span class="hljs-string">@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option;</span><span class="hljs-string">flush privileges;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>calibre-web 豆瓣API失效解决</title>
      <link href="blog/2020/11/23/calibre-1/"/>
      <url>blog/2020/11/23/calibre-1/</url>
      
        <content type="html"><![CDATA[<p>网上常见的 apikey <code>0df993c66c0c636e29ecbb5344252a4a</code> 已经在八月被豆瓣封禁。<br>所以需要将旧的key改为<code>054022eaeae0b00e0fc068c0c0a2102a</code></p><p>修改方式：</p><pre><code class="hljs shell">vim /calibre-web/app/cps/static/js/get_meta.js</code></pre><p>找到</p><pre><code class="hljs javascript"><span class="hljs-comment">// 找到：</span><span class="hljs-keyword">var</span> apikey = <span class="hljs-string">&quot;0df993c66c0c636e29ecbb5344252a4a&quot;</span>;<span class="hljs-comment">// 改为：</span><span class="hljs-keyword">var</span> apikey = <span class="hljs-string">&quot;054022eaeae0b00e0fc068c0c0a2102a&quot;</span>;</code></pre><blockquote><p>如下图所示：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020101317514998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNTU2Mjc0NDg1,size_16,color_FFFFFF,t_70#pic_center=800x" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 技术随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> calibre </tag>
            
            <tag> NAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2运行Python</title>
      <link href="blog/2020/11/23/pm2-1/"/>
      <url>blog/2020/11/23/pm2-1/</url>
      
        <content type="html"><![CDATA[<p>使用pm2运行Python命令：</p><pre><code class="hljs livecodeserver"><span class="hljs-comment"># --interpreter指定解释器</span>pm2 <span class="hljs-built_in">start</span> main.py -x <span class="hljs-comment">--interpreter python3</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker permission denied</title>
      <link href="blog/2020/11/23/docker-1/"/>
      <url>blog/2020/11/23/docker-1/</url>
      
        <content type="html"><![CDATA[<p>用户权限报错</p><blockquote><p>Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/create?fromImage=10.211.55.3%3A5000%2Flearn&amp;tag=registry: dial unix /var/run/docker.sock: connect: permission denied</p></blockquote><p>原因：docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。</p><p><strong>解决方法1</strong></p><blockquote><p>使用sudo获取管理员权限，运行docker命令</p></blockquote><p><strong>解决方法2</strong></p><blockquote><p>docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限<br>因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令</p></blockquote><pre><code class="hljs crmsh">sudo groupadd docker     <span class="hljs-comment">#添加docker用户组</span>sudo gpasswd -a $<span class="hljs-keyword">USER</span> <span class="hljs-title">docker</span>     <span class="hljs-comment">#将登陆用户加入到docker用户组中</span>newgrp docker     <span class="hljs-comment">#更新用户组</span>sudo systemctl restart docker   <span class="hljs-comment"># 重启docker</span>docker ps    <span class="hljs-comment">#测试docker命令是否可以使用sudo正常使用</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
